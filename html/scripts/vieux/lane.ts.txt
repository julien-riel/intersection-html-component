import * as config from "../config.js";
import * as draw from "./drawLib.js";

export interface ILaneOptions {
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  usage?: any;
  lines?: any;
  type?: any;
}

class Lane3 {
  private x: number;
  private y: number;
  private width: number;
  private height: number;
  private distanceLigneArret: number;
  private lines: {
    lineLeft: any;
    lineCenter: any;
    lineRight: any;
  };
  private usage: string;
  private type: string;
  private virages: string[];

  constructor(options: ILaneOptions) {
    this.x = options.x || 0;
    this.y = options.y || 0;
    this.width = options.width || config.defaultLaneWidth;
    this.height = options.height || 500; // "trottoir (haut) ou route (bas)"
    this.type = options.type || "entrant";
    this.distanceLigneArret = config.distanceLigneArret;
    this.lines = options.lines || {};
    this.usage = options.usage || "voitures";
    this.virages = ["gauche", "tout-droit", "droite", "demi-tour"];
  }

  debugPoint(x: number, y: number, nom: string) {
    draw.drawCircle(x, y, 5, "red");
    draw.drawText(x, y, nom);
  }

  /**
   * Dessine les lignes, il faut dessiner les lignes après avoir dessiné la chaussée.
   *
   * Cette fonction mérite d'être refactorisée
   * */
  drawLines() {
    const margin = 8;
    if (this.lines.lineLeft) {
      if (this.lines.lineLeft.type == "solid") {
        draw.createLignePleine(
          margin + this.x,
          this.y + this.distanceLigneArret,
          margin + this.x,
          this.y + this.height,
          this.lines.lineLeft.color
        );
      } else {
        draw.createLignePointille(
          margin + this.x,
          this.y + this.distanceLigneArret,
          margin + this.x,
          this.y + this.height,
          this.lines.lineLeft.color
        );
      }
    }
    if (this.lines.lineCenter) {
      if (this.lines.lineCenter.type == "solid") {
        draw.createLignePleine(
          this.width + this.x,
          this.y + this.distanceLigneArret,
          this.width + this.x,
          this.y + this.height,
          this.lines.lineCenter.color
        );
      } else {
        draw.createLignePointille(
          this.width + this.x,
          this.y + this.distanceLigneArret,
          this.width + this.x,
          this.y + this.height,
          this.lines.lineCenter.color
        );
      }
    }
    if (this.lines.lineRight) {
      if (this.lines.lineRight.type == "solid") {
        draw.createLignePleine(
          -margin + this.width + this.x,
          this.y + this.distanceLigneArret,
          -margin + this.width + this.x,
          this.y + this.height,
          this.lines.lineRight.color
        );
      } else {
        draw.createLignePointille(
          -margin + this.width + this.x,
          this.y + this.distanceLigneArret,
          -margin + this.width + this.x,
          this.y + this.height,
          this.lines.lineRight.color
        );
      }
    }

    if (this.usage == "car" && this.type === "entrant")
      draw.createLignePleine(
        this.x,
        this.y + this.distanceLigneArret,
        this.x + this.width,
        this.y + this.distanceLigneArret,
        "white"
      );
  }

  getCouleurByUsage(usage: string) {
    if (usage == "car") {
      return config.couleurRoute;
    } else if (usage == "trottoir") {
      return "lightGray";
    } else if (usage == "terre-plein") {
      return "green";
    }
    return config.couleurRoute;
  }

  draw() {
    /*
      if (this.usage == "trottoir") {
        draw.drawCircle(
          this.x,
          this.y,
          this.width,
          this.getCouleurByUsage(this.usage)
        );
      }
    */

    draw.drawRectangle(
      this.x,
      this.y,
      this.width,
      this.height,
      this.getCouleurByUsage(this.usage)
    );
    draw.drawCircle(this.x, 0, 2, "black");

    //
    if (this.usage == "car" && this.type == "entrant") {
      const posFlecheX = this.getLaneCenter().x;
      const posFlecheY =
        this.y + config.distanceLigneArret + config.distanceFlechesLigneArret;
      const offset = 20;
      draw.drawUse(-offset + posFlecheX, posFlecheY, "gauche");
      draw.drawUse(0 + posFlecheX, posFlecheY, "centre");
      draw.drawUse(+offset + posFlecheX, posFlecheY, "droite");
      draw.drawUse(+0 + posFlecheX, posFlecheY + 200, "bike");
    }
  }

  debug() {
    const textMargin = 7;
    this.debugPoint(this.x, this.y, `${this.x}, ${this.y}`);
    this.debugPoint(this.getLaneCenter().x, this.y + 30, "milieu de voie");
    const posFlecheY =
      this.y + config.distanceLigneArret + config.distanceFlechesLigneArret;
    draw.drawText(this.x + textMargin, posFlecheY + 230, this.usage);
  }

  getLaneCenter() {
    return {
      x: this.x + this.width / 2,
    };
  }
}

export { Lane3 };
